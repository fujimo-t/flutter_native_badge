// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return (value as Any) as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FlutterNativeBadgeApi {
  func requestPermission() throws
  func getBadgeCount() throws -> Int64
  func setBadgeCount(count: Int64) throws
  func clearBadgeCount() throws
  func showRedDot() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FlutterNativeBadgeApiSetup {
  /// The codec used by FlutterNativeBadgeApi.
  /// Sets up an instance of `FlutterNativeBadgeApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FlutterNativeBadgeApi?) {
    let requestPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterNativeBadgeApi.requestPermission", binaryMessenger: binaryMessenger)
    if let api = api {
      requestPermissionChannel.setMessageHandler { _, reply in
        do {
          try api.requestPermission()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      requestPermissionChannel.setMessageHandler(nil)
    }
    let getBadgeCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterNativeBadgeApi.getBadgeCount", binaryMessenger: binaryMessenger)
    if let api = api {
      getBadgeCountChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getBadgeCount()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getBadgeCountChannel.setMessageHandler(nil)
    }
    let setBadgeCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterNativeBadgeApi.setBadgeCount", binaryMessenger: binaryMessenger)
    if let api = api {
      setBadgeCountChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let countArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.setBadgeCount(count: countArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setBadgeCountChannel.setMessageHandler(nil)
    }
    let clearBadgeCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterNativeBadgeApi.clearBadgeCount", binaryMessenger: binaryMessenger)
    if let api = api {
      clearBadgeCountChannel.setMessageHandler { _, reply in
        do {
          try api.clearBadgeCount()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearBadgeCountChannel.setMessageHandler(nil)
    }
    let showRedDotChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterNativeBadgeApi.showRedDot", binaryMessenger: binaryMessenger)
    if let api = api {
      showRedDotChannel.setMessageHandler { _, reply in
        do {
          try api.showRedDot()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      showRedDotChannel.setMessageHandler(nil)
    }
  }
}
